import Post from "../postModel";

export default new Post(
  // title
  "The Diarysta Frontend",
  // subtitle
  "Building a responsive single-page app with React and Materialize",
  // publishDate
  new Date("2020-10-26"),
  // titleImageUrl
  "https://pb-data-blogposts.s3.eu-central-1.amazonaws.com/diarysta-frontend/diary.jpg",
  // titleImageDescription
  "How did you feel? What did you do? And how does it correlate? Keep track with Diarysta!",
  // tags
  ["Web Development"],
  // content
  `**TL;DR**: I built a diary app called Diarysta in which you can track your daily moods and activities and get a graphical summary of your personal diary-stats. It is a MERN stack (MongoDB, Express, React, Node.js) application and in this blog post, I will discuss the design of its frontend/user interface for the web browser. I have previously written [another post on its backend](http://www.pascal-bliem.com/blog/the%20diarysta%20backend). You can visit a demo of the app [here](https://diarysta.onrender.com/) and also have a look at its [Github repo](https://github.com/Pascal-Bliem/diarysta).

### Keep track of your mood

Do you know how your mood fluctuates over time or how it correlates with your every-day activities? Traditionally, that's what people have diaries for. But hey, wouldn't it be cooler to use an app that let's you track those things in a way that is neatly organized, updatable, searchable, and gives you a graphic summary of how you've felt and what you've done? Yes, it would! So that's what Diarysta is all about. A web app that let's you create diary entries in which you specify your mood and select the activities you've done, all in your browser. And it comes in English, German, and Indonesian! You can find Diarysta's source code on [Github](https://github.com/Pascal-Bliem/diarysta). You can find a demo of the actual project [here](https://diarysta.onrender.com/). Note that the hosting instance hibernates after long inactivity, and it may take a few seconds for it to wake up and make the app available.

The app is build with the MERN stack, which stands for [**M**ongoDB](https://www.mongodb.com/), [**E**xpress](https://expressjs.com/), [**R**eact](https://reactjs.org/), and [**N**ode.js](https://nodejs.org/). MongoDB is a NoSQL document-based database, Node.js is a JavaScript runtime environment that executes JavaScript code outside a web browser, and Express is minimalist web framework that runs on Node. I've already discussed those backend components in a [previous post](http://www.pascal-bliem.com/blog/the%20diarysta%20backend). In this post I will talk about the frontend which has been built with React, a JavaScript library for building user interfaces or UI components, and [Materialize](https://materializecss.com/), a responsive front-end framework based on [Material Design](https://material.io/). I will talk about implementation details on a high level, but not go down into the source code. Describing the whole code base would be way too verbose, so I'll try to provide images of the UI components, explain what's going on with them, and link to the corresponding file in the Diarysta [Github repo](https://github.com/Pascal-Bliem/diarysta).

### Thinking about functionality and state

What does a diary app need to do and how do we let all components of the application know whats going on? React apps are generally composed of [components](https://reactjs.org/docs/components-and-props.html), which are independent, reusable, and conceptually isolated pieces of the UI. Individual components can hold [state](https://reactjs.org/docs/state-and-lifecycle.html) to keep track of whats going on inside of them, and they can also pass down this information as properties (or just props) to their child components. However, if there are many components at different levels of the UI hierarchy that need to access the same state information, this can get messy pretty quickly. It would be much better if there was a single source of truth that "hovers" over all components. For very large applications, a popular library for state management is [Redux](https://redux.js.org/), but React also has its own [Context-API](https://reactjs.org/docs/context.html), which I use in this project. It provides a way to pass data through the component tree without having to pass props down manually at every level by making the state of interest available through the context everywhere.

We want to be able to create/login users and check if they're authenticated to make private routes accessible. So, first of all we need a [context for authentication](https://github.com/Pascal-Bliem/diarysta/tree/master/client/src/context/auth) (I will now always link to the components/files I'm talking about), which will keep track of the user, its token, and its state of authentication. It will also provide all necessary functions calling the API endpoints for registration, login, logout, etc. Then, of course, we want to read all of our diary entries, filter them for search terms, create new ones, and maybe update or delete old ones. We'll need an [entry context](https://github.com/Pascal-Bliem/diarysta/tree/master/client/src/context/entry) that keeps track of all this and provides the functions that'll do the corresponding request to our backend API. Last but not least, we want the whole UI to be available in three languages: English, German, and Indonesian (which are the only languages I'm more or less fluent in). We need a [locale context](https://github.com/Pascal-Bliem/diarysta/tree/master/client/src/context/locale) for keeping the users' locale, saving it to users' local storage so that it'll be remembered and of course, keeping all the [translations](https://github.com/Pascal-Bliem/diarysta/blob/master/client/src/config/translations.js). Seriously, when I started this project, I had no clue how incredibly annoying it would be to create a trilingual application, having to type every little UI text three times. Anyway, let's [login](https://github.com/Pascal-Bliem/diarysta/blob/master/client/src/components/auth/Login.js) or [register](https://github.com/Pascal-Bliem/diarysta/blob/master/client/src/components/auth/Register.js), select the [language](https://github.com/Pascal-Bliem/diarysta/blob/master/client/src/components/layout/LanguageMenu.js) you need, and take a tour through the app!

<img src="https://pb-data-blogposts.s3.eu-central-1.amazonaws.com/diarysta-frontend/login.png" alt="Select your language and login or register!" width="100%">

### Filling Diarysta with entries

Once you're logged in, you'll find yourself on the main [entries](https://github.com/Pascal-Bliem/diarysta/blob/master/client/src/components/pages/Entries.js) page. You can get to other pages through the [navbar](https://github.com/Pascal-Bliem/diarysta/blob/master/client/src/components/layout/Navbar.js) without even having to send new request to the server, since Diarysta is a single-page application and all routing is done on the front end by the [React Router](https://reactrouter.com/) library. If you have already created any entries, you'll find them here, sorted by date of creation. All of a user's entries are fetched via an API call to the Diarysta backend, which gets them from the database. Besides a date, every [entry](https://github.com/Pascal-Bliem/diarysta/blob/master/client/src/components/entries/EntryItem.js) also has a [mood](https://github.com/Pascal-Bliem/diarysta/blob/master/client/src/components/entries/Mood.js), represented by a matching emoji, which corresponds to how you felt when creating the entry. Optionally, you can select [activities](https://github.com/Pascal-Bliem/diarysta/blob/master/client/src/components/entries/Activities.js) you did that day and add a note. You'll be able to search all posts for keywords as well by using the [search bar](https://github.com/Pascal-Bliem/diarysta/blob/master/client/src/components/entries/EntryFilter.js) on top of the page.

<img src="https://pb-data-blogposts.s3.eu-central-1.amazonaws.com/diarysta-frontend/entries.png" alt="Read and search your diary entries." style="width: 50%;">

In case you haven't created any entries yet, you can do so by clicking the action button on the bottom right. By default, this button will preselect the current date for the entry, but if you hover over it, it'll show you two more buttons for creating an entry for yesterday or any date by redirecting to the calendar page. This is just for convenience, as you can also change the date (as long as it's not in the future) in the [form](https://github.com/Pascal-Bliem/diarysta/blob/master/client/src/components/entries/AddEntry.js) that pops up after you clicked. You'll also have to select a mood (it'll complain if you don't) and you can select various activities from categories such as health, hobbies & studying, social, food, and chores. Those activities will show up as tags on your entry. Last but not least you can write down what you did that day in a note. You can open the same form with pre-filled fields if you want to [edit](https://github.com/Pascal-Bliem/diarysta/blob/master/client/src/components/entries/UpdateEntry.js) an entry, and you can, of course, also delete it.

<img src="https://pb-data-blogposts.s3.eu-central-1.amazonaws.com/diarysta-frontend/add_entry.png" alt="Add a new entry and select a mood, activities, and a note." style="width: 100%;">

If you want to get an overview of what happened when, you can navigate to the [calendar page](https://github.com/Pascal-Bliem/diarysta/blob/master/client/src/components/pages/Calendar.js) through the [navbar](https://github.com/Pascal-Bliem/diarysta/blob/master/client/src/components/layout/Navbar.js). You can pick a date, as long as it's not in the future, and see which entries you created or chose to create a new one for that date.

<img src="https://pb-data-blogposts.s3.eu-central-1.amazonaws.com/diarysta-frontend/calendar.png" alt="Look up, create, or delete entries for certain days." style="width: 100%;">

### Your personal statistics

If you want to get a cool graphical overview of how your mood developed, what you have done how often, and how your activities correlate with your mood, take a look at the [stats page](https://github.com/Pascal-Bliem/diarysta/blob/master/client/src/components/pages/Stats.js). On the top, you'll see [two counters](https://github.com/Pascal-Bliem/diarysta/blob/master/client/src/components/stats/DaysInRow.js) that'll tell for how many days in a row, from today, you've been adding entries and how long your longest chain of entries was, respectively. Below you'll find a couple of charts (using the [Chart.js](https://www.chartjs.org/) library) which were constructed from your diary entries. For all charts, the radio buttons below let you chose if you want to consider a range of the last 7, 30, or 365 days when calculating the stats. The [first chart](https://github.com/Pascal-Bliem/diarysta/blob/master/client/src/components/stats/MoodChart.js) shows you how your mood developed over the selected time range.

<img src="https://pb-data-blogposts.s3.eu-central-1.amazonaws.com/diarysta-frontend/moodchart.png" alt="See how many days in row you added entries and how your mood developed over time." style="width: 65%;">

Going further down, you got a [bar chart](https://github.com/Pascal-Bliem/diarysta/blob/master/client/src/components/stats/ActivityCount.js) that counts how often you did which activity, and below that, another [bar chart](https://github.com/Pascal-Bliem/diarysta/blob/master/client/src/components/stats/ActivityMoodCorrelation.js) which displays the average mood you were in when performing a certain activity.

<img src="https://pb-data-blogposts.s3.eu-central-1.amazonaws.com/diarysta-frontend/activitycount.png" alt="See which activities you did how often and what your average mood was when doing these activities." style="width: 65%;">

There's one more bar chart that shows you your [average mood per day of the week](https://github.com/Pascal-Bliem/diarysta/blob/master/client/src/components/stats/AverageDailyMood.js) (how bad are your Mondays?) and, finally, a [doughnut chart](https://github.com/Pascal-Bliem/diarysta/blob/master/client/src/components/stats/MoodCount.js) that simply display which fraction each mood option takes in your overall state of mind.

<img src="https://pb-data-blogposts.s3.eu-central-1.amazonaws.com/diarysta-frontend/moodcount.png" alt="See your average mood per day of the week and your overall mood count." style="width: 65%;">

### Conclusion

And that's basically it! A MERN stack app that let's you keep track of your mood and activities, and gives you a nice graphical overview of them. In a [previous post](http://www.pascal-bliem.com/blog/the%20diarysta%20backend) I have already discussed how to create a backend API with Express and Node.js and connect it to a MongoDB database. In this post, we've seen an example of a single-page React app which connects to this API to only send and receive data and does everything else by itself on the frontend. I hope you found it interesting to read and maybe it inspires you to start keeping a diary yourself. If you're interested to look at it in detail, check out the [demo project](https://diarysta.onrender.com/stats) or Diarysta's [Github repo](https://github.com/Pascal-Bliem/diarysta). Thanks a lot for reading!
`
);
